{"version":3,"sources":["safe-trim.js"],"names":["global","factory","exports","module","define","amd","safeTrim","this","string","SP","TAB","CR","LF","CR_LF","ZERO_WIDTH_SPACE","OTHER_SPACE","ALL_SPACE","leftReg","RegExp","rightReg","zeroReg","otherReg","replace","trim"],"mappings":";;;;;CAKC,SAAUA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,IAC9D,kBAAXG,SAAyBA,OAAOC,IAAMD,OAAOH,GACnDD,EAAOM,SAAWL,KACnBM,KAAM,WAAc,YAEpB,SAASD,GAASE,GAChB,GAAIC,GAAK,IACLC,EAAM,KACNC,EAAK,KACLC,EAAK,KACLC,EAAQ,OACRC,EAAmB,yDAGnBC,EAAc,uGAEdC,EAAYP,EAAKC,EAAMC,EAAKC,EAAKC,EAAQC,EAAmBC,EAE5DE,EAAU,GAAIC,QAAO,KAAOF,EAAY,MACxCG,EAAW,GAAID,QAAO,IAAMF,EAAY,OACxCI,EAAU,GAAIF,QAAO,IAAMJ,EAAmB,KAAM,KACpDO,EAAW,GAAIH,QAAO,IAAMH,EAAc,KAAM,IAEpD,QAAQP,EAAS,IAAIc,QAAQL,EAAS,IACrCK,QAAQH,EAAU,IAClBG,QAAQ,GAAIJ,QAAOR,EAAK,KAAM,IAC9BY,QAAQ,GAAIJ,QAAOL,EAAO,KAAMD,GAChCU,QAAQ,GAAIJ,QAAOP,EAAI,KAAMC,GAC7BU,QAAQF,EAAS,IACjBE,QAAQD,EAAU,IAClBE,OAGH,MAAOjB","file":"safe-trim.min.js","sourcesContent":["/*!\n * safe-trim v1.0.5\n * (c) 2016 Jerry\n * Released under the MIT License.\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.safeTrim = factory());\n}(this, function () { 'use strict';\n\n  function safeTrim(string) {\n    var SP = ' '; // common space\n    var TAB = '\\t'; // tab\n    var CR = '\\r'; //  Carriage Return, Used as a new line character in Mac OS before X\n    var LF = '\\n'; //  Line Feed, Used as a new line character in Unix/Mac OS X\n    var CR_LF = '\\r\\n'; // Used as a new line character in Windows\n    var ZERO_WIDTH_SPACE = '\\v' + // \\x0B VT 垂直制表符\n    '\\f' + //  \\x0C FF 换页符\n    '​‌‍‎‏\\u000b\\u2028\\u2029﻿';\n    var OTHER_SPACE = '  ᠎             　';\n\n    var ALL_SPACE = SP + TAB + CR + LF + CR_LF + ZERO_WIDTH_SPACE + OTHER_SPACE;\n\n    var leftReg = new RegExp('^[' + ALL_SPACE + ']+');\n    var rightReg = new RegExp('[' + ALL_SPACE + ']+$');\n    var zeroReg = new RegExp('[' + ZERO_WIDTH_SPACE + ']+', 'g');\n    var otherReg = new RegExp('[' + OTHER_SPACE + ']+', 'g');\n\n    return (string + '').replace(leftReg, '') // trim left\n    .replace(rightReg, '') // trim right\n    .replace(new RegExp(TAB, 'g'), '') // TAB => ''\n    .replace(new RegExp(CR_LF, 'g'), LF) // '\\r\\n' => '\\n'\n    .replace(new RegExp(CR, 'g'), LF) // single \\r => '\\n'\n    .replace(zeroReg, '') // Zero-width-space => ''\n    .replace(otherReg, '') // other => ''\n    .trim(); // safety\n  }\n\n  return safeTrim;\n\n}));"]}